name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v2
    - uses: seanmiddleditch/gha-setup-ninja@master
    - name: Cache Build Artifacts
      uses: actions/cache@v2
      with:
        path: build
        key: ${{ runner.os }}-build-artifacts
    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install --git https://github.com/skyline-rs/fake-ld --features=gcc-forwarder
        bash build_skyline.sh
        echo "target_triple=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
    - name: Build Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir build
        mkdir build/x86_64-pc-windows-msvc
        rm -r build/x86_64-pc-windows-msvc
        cargo install --git https://github.com/skyline-rs/fake-ld --features=fake-gcc
        choco install llvm zig
        bash build_skyline_win.sh
        echo "target_triple=x86_64-pc-windows-msvc" >> $GITHUB_ENV
        rm -r build/x86_64-pc-windows-msvc/stage1 build/x86_64-pc-windows-msvc/stage1-rustc build/x86_64-pc-windows-msvc/stage1-std build/x86_64-pc-windows-msvc/stage1-tools build/x86_64-pc-windows-msvc/stage2-tools build/x86_64-pc-windows-msvc/stage0
    - name: Build MacOS
      if: matrix.os == 'macOS-latest'
      run: |
        cargo install --git https://github.com/skyline-rs/fake-ld --features=gcc-forwarder
        bash build_skyline_mac.sh
        echo "target_triple=x86_64-apple-darwin" >> $GITHUB_ENV
    - name: Package Release
      run: |
        rust-zip build/${{ env.target_triple }}/stage2 build-${{ env.target_triple }}.zip
    - uses: actions/upload-artifact@v2
      with:
        name: build-${{ env.target_triple }}.zip
        path: build-${{ env.target_triple }}.zip
    - name: Delete Windows Leftovers
      shell: bash
      if: matrix.os == 'windows-latest'
      run: rm -r build build-x86_64-pc-windows-msvc.zip
  release:
    runs-on: ubuntu-latest
    needs: build
    name: Upload Release
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-x86_64-unknown-linux-gnu.zip
          path: build-x86_64-unknown-linux-gnu
      - uses: actions/download-artifact@v2
        with:
          name: build-x86_64-apple-darwin.zip
          path: build-x86_64-apple-darwin
      - uses: actions/download-artifact@v2
        with:
          name: build-x86_64-pc-windows-msvc.zip
          path: build-x86_64-pc-windows-msvc
      - name: Listing
        run: |
          ls -l
          ls -lh build-x86_64-unknown-linux-gnu
          ls -lh build-x86_64-apple-darwin
          ls -lh build-x86_64-pc-windows-msvc
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Linux Build
        id: upload-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-x86_64-unknown-linux-gnu/build-x86_64-unknown-linux-gnu.zip
          asset_name: build-x86_64-unknown-linux-gnu.zip
          asset_content_type: application/octet-stream
      - name: Upload Windows Build
        id: upload-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-x86_64-pc-windows-msvc/build-x86_64-pc-windows-msvc.zip
          asset_name: build-x86_64-pc-windows-msvc.zip
          asset_content_type: application/octet-stream
      - name: Upload MacOS Build
        id: upload-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-x86_64-apple-darwin/build-x86_64-apple-darwin.zip
          asset_name: build-x86_64-apple-darwin.zip
          asset_content_type: application/octet-stream
